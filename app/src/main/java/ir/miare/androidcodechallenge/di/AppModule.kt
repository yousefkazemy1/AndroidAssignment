package ir.miare.androidcodechallenge.di

import android.content.Context
import android.util.Log
import dagger.Module
import dagger.Provides
import dagger.hilt.InstallIn
import dagger.hilt.android.qualifiers.ApplicationContext
import dagger.hilt.components.SingletonComponent
import ir.logicbase.mockfit.MockFitConfig
import ir.logicbase.mockfit.MockFitInterceptor
import ir.miare.androidcodechallenge.data.remote.EndPoints.BASE_URL
import okhttp3.OkHttpClient
import retrofit2.Converter
import retrofit2.Retrofit
import retrofit2.converter.jackson.JacksonConverterFactory
import java.util.concurrent.TimeUnit
import javax.inject.Singleton

@InstallIn(SingletonComponent::class)
@Module()
class AppModule {
    @Singleton
    @Provides
    fun provideRetrofit(
        okHttpClient: OkHttpClient,
        converterFactory: Converter.Factory,
    ): Retrofit =
        Retrofit.Builder().baseUrl(BASE_URL).addConverterFactory(converterFactory)
            .client(okHttpClient).build()

    @Singleton
    @Provides
    fun provideOkHttpClient(
        @ApplicationContext context: Context,
    ): OkHttpClient  =
        OkHttpClient.Builder().addInterceptor(
            MockFitInterceptor(
                bodyFactory = { input -> context.resources.assets.open(input) },
                logger = { tag, message -> Log.d(tag, message) },
                baseUrl = BASE_URL,
                requestPathToJsonMap = MockFitConfig.REQUEST_TO_JSON, // autogenerated constant, just press build button
                mockFilesPath = "",
                mockFitEnable = true,
                apiEnableMock = true,
                apiIncludeIntoMock = arrayOf(),
                apiExcludeFromMock = arrayOf(),
                apiResponseLatency = 1000L
            )
        ).connectTimeout(20, TimeUnit.SECONDS).writeTimeout(20, TimeUnit.SECONDS)
            .readTimeout(20, TimeUnit.SECONDS).build()

    @Singleton
    @Provides
    fun provideConverterFactory(): Converter.Factory = JacksonConverterFactory.create()
}